from flask import Flask, request
import RPi.GPIO as GPIO
import io
import picamera
import logging
import socketserver
from threading import Condition
from http import server
import ssl
import threading

app = Flask(_name_)

# GPIO pin setup
in1 = 24
in2 = 23
in3 = 17
in4 = 27

# Setup GPIO pins
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4, GPIO.OUT)

GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)
GPIO.output(in3, GPIO.LOW)
GPIO.output(in4, GPIO.LOW)

# Motor control functions
def forward():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.HIGH)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)

def backward():
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)

def right():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.HIGH)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)

def left():
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)

def stop():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.LOW)

@app.route('/command', methods=['GET'])
def command():
    direction = request.args.get('direction')
    if direction:
        if direction == "forward":
            forward()
        elif direction == "backward":
            backward()
        elif direction == "right":
            right()
        elif direction == "left":
            left()
        elif direction == "stop":
            stop()
        else:
            return "Invalid command", 400
        return f"Command {direction} executed", 200
    else:
        return "No command received", 400

# HTML page with split-screen VR mode
PAGE = """\
<html>
<head>
<title>Raspberry Pi - VR Surveillance Camera</title>
</head>
<body>
    <table>
        <tr>
            <td><img src="stream.mjpg" width="480" height="320"></td>
            <td><img src="stream.mjpg" width="480" height="320"></td>
        </tr>
    </table>
</body>
</html>
"""

# Streaming output class
class StreamingOutput(object):
    def __init__(self):
        self.frame = None
        self.buffer = io.BytesIO()
        self.condition = Condition()

    def write(self, buf):
        if buf.startswith(b'\xff\xd8'):
            self.buffer.truncate()
            with self.condition:
                self.frame = self.buffer.getvalue()
                self.condition.notify_all()
            self.buffer.seek(0)
        return self.buffer.write(buf)

# Streaming handler class
class StreamingHandler(server.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(301)
            self.send_header('Location', '/index.html')
            self.end_headers()
        elif self.path == '/index.html':
            content = PAGE.encode('utf-8')
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.send_header('Content-Length', len(content))
            self.end_headers()
            self.wfile.write(content)
        elif self.path == '/stream.mjpg':
            self.send_response(200)
            self.send_header('Age', 0)
            self.send_header('Cache-Control', 'no-cache, private')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=FRAME')
            self.end_headers()
            try:
                while True:
                    with output.condition:
                        output.condition.wait()
                        frame = output.frame
                    self.wfile.write(b'--FRAME\r\n')
                    self.send_header('Content-Type', 'image/jpeg')
                    self.send_header('Content-Length', len(frame))
                    self.end_headers()
                    self.wfile.write(frame)
                    self.wfile.write(b'\r\n')
            except Exception as e:
                logging.warning('Removed streaming client %s: %s', self.client_address, str(e))
        else:
            self.send_error(404)
            self.end_headers()

# Streaming server class with HTTPS support
class StreamingServer(socketserver.ThreadingMixIn, server.HTTPServer):
    allow_reuse_address = True
    daemon_threads = True

def start_camera():
    with picamera.PiCamera(resolution='640x480', framerate=24) as camera:
        global output
        output = StreamingOutput()
        camera.rotation = 180
        camera.start_recording(output, format='mjpeg')
        try:
            address = ('', 8443)  # HTTPS port
            server = StreamingServer(address, StreamingHandler)
            server.socket = ssl.wrap_socket(server.socket, keyfile='key.pem', certfile='cert.pem', server_side=True)
            server.serve_forever()
        finally:
            camera.stop_recording()

# Run the Flask app and camera streaming in parallel
if __name__ == '__main__':
    threading.Thread(target=start_camera).start()
    app.run(host='0.0.0.0', port=5000)